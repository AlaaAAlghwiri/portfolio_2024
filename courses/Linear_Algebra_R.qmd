---
title: "Linear Algebra with R"
format:
  html:
    code-fold: false
    toc: true
author: "Dr. Alaa Alghwiri"
date: "2024-08-16"
categories: [Mathematics, R Programming]
image: "la_r.jpg"
---

This course provides a detailed foundation in linear algebra with practical R code examples.

## Introduction to Linear Algebra

### What is Linear Algebra?
#### Definition and significance
### Applications in various fields

## R Setup

### Installing Required Packages
* Matrix (for advanced matrix operations)
* pracma (for additional mathematical functions)
* ggplot2 (for visualization)

```{r}
# install.packages(c("Matrix", "pracma", "ggplot2"))
```

#### Loading Libraries

```{r}
library(Matrix)
library(pracma)
library(ggplot2)
```

## Vectors

### Definition and Basic Operations
#### Creating vectors
#### Vector addition, subtraction, and scalar multiplication

```{r}
# Creating vectors
v1 <- c(1, 2, 3)
v2 <- c(4, 5, 6)

# Vector addition
v_add <- v1 + v2

# Vector subtraction
v_sub <- v1 - v2

# Scalar multiplication
scalar <- 3
v_scalar <- scalar * v1

print(paste("Vector Addition:", paste(v_add, collapse = ", ")))
print(paste("Vector Subtraction:", paste(v_sub, collapse = ", ")))
print(paste("Scalar Multiplication:", paste(v_scalar, collapse = ", ")))
```

### Dot Product

```{r}
dot_product <- sum(v1 * v2)
print(paste("Dot Product:", dot_product))
```

### Norm of a Vector

```{r}
norm_v1 <- norm(v1, type = "2")
print(paste("Norm of v1:", norm_v1))
```

## Matrices

### Matrix Definition and Basic Operations
#### Creating matrices
#### Matrix addition, subtraction, and scalar multiplication

```{r}
# Creating matrices
A <- matrix(c(1, 3, 2, 4), nrow = 2, byrow = TRUE)
B <- matrix(c(5, 7, 6, 8), nrow = 2, byrow = TRUE)
# Matrix addition
A_add_B <- A + B

# Matrix subtraction
A_sub_B <- A - B

# Scalar multiplication
scalar <- 2
A_scalar <- scalar * A

print("Matrix Addition:")
print(A_add_B)
print("Matrix Subtraction:")
print(A_sub_B)
print("Scalar Multiplication:")
print(A_scalar)
```

#### Matrix Multiplication

```{r}
A_mul_B <- A %*% B
print("Matrix Multiplication:")
print(A_mul_B)
```

#### Transpose of a Matrix

```{r}
A_transpose <- t(A)
print("Transpose of A:")
print(A_transpose)
```

#### Determinant and Inverse

```{r}
det_A <- det(A)
inv_A <- solve(A)

print(paste("Determinant of A:", det_A))
print("Inverse of A:")
print(inv_A)
```

## Systems of Linear Equations

### Solving Systems of Equations

```{r}
# Example system: A * x = b
A <- matrix(c(3, 1, 2, 2), nrow = 2)
b <- c(5, 5)

# Solving for x
x <- solve(A, b)
print("Solution of the system:")
print(x)
```

## Eigenvalues and Eigenvectors

### Calculating Eigenvalues and Eigenvectors

```{r}
eigen_decomp <- eigen(A)
eigenvalues <- eigen_decomp$values
eigenvectors <- eigen_decomp$vectors

print("Eigenvalues:")
print(eigenvalues)
print("Eigenvectors:")
print(eigenvectors)
```

## Singular Value Decomposition (SVD)

### Understanding SVD

```{r}
svd_decomp <- svd(A)
U <- svd_decomp$u
S <- svd_decomp$d
Vt <- svd_decomp$v

print("U:")
print(U)
print("Singular values (S):")
print(S)
print("Vt:")
print(Vt)
```

## Principal Component Analysis (PCA)

### Applying PCA for Dimensionality Reduction

```{r}
# Example data: 3-dimensional points
X <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, byrow = TRUE)

# Apply PCA
pca <- prcomp(X, center = TRUE, scale. = TRUE)
X_reduced <- pca$x[, 1:2]  # Reduced to 2 dimensions

print("Reduced Data:")
print(X_reduced)
```

## Linear Transformations and Projections

### Visualizing Linear Transformations

```{r}
# Define a transformation matrix
T <- matrix(c(2, 0, 0, 0.5), nrow = 2)

# Define points to transform
points <- matrix(c(1, 1, 2, 2, 3, 3), nrow = 2)

# Apply transformation
transformed_points <- T %*% points

# Plot original and transformed points
df <- data.frame(x = c(points[1, ], transformed_points[1, ]), 
                  y = c(points[2, ], transformed_points[2, ]),
                  type = rep(c("Original", "Transformed"), each = 3))

ggplot(df, aes(x = x, y = y, color = type)) +
  geom_point(size = 3) +
  labs(title = "Linear Transformation", x = "x", y = "y") +
  theme_minimal()
```

## Applications of Linear Algebra

### Machine Learning

#### Linear Regression

```{r}
# Sample data
X <- cbind(1, c(1, 2, 3, 4, 5))  # Adding intercept term
y <- c(1.1, 2.0, 2.9, 4.1, 5.0)

# Train linear regression model
model <- lm(y ~ X - 1)  # -1 to omit intercept term as it is included in X

# Predictions
predictions <- predict(model, newdata = data.frame(X))

print("Predictions:")
print(predictions)
```

## Advanced Topics (Optional)

### Matrix Factorizations
#### LU Decomposition
#### QR Decomposition

```{r}
# LU Decomposition
lu_decomp <- lu(A)
P <- lu_decomp$P
L <- lu_decomp$L
U <- lu_decomp$U

print("P:")
print(P)
print("L:")
print(L)
print("U:")
print(U)

# QR Decomposition
qr_decomp <- qr(A)
Q <- qr.Q(qr_decomp)
R <- qr.R(qr_decomp)

print("Q:")
print(Q)
print("R:")
print(R)
```

## Summary and Best Practices
